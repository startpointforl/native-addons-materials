#!/usr/bin/env node

const path = require('path');
const { BenchmarkRunner } = require('./benchmark-runner');
const { listAvailableFunctions, getFunctionByKey } = require('./functions-registry');
const config = require('./config');
const { initWasm } = require('../../wasm');

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
    const args = process.argv.slice(2);
    const options = {
        functionKey: null,
        help: false,
        listFunctions: false,
    };

    for (let i = 0; i < args.length; i++) {
        const arg = args[i];

        switch (arg) {
            case '--help':
                options.help = true;
                break;
            
            case '--functions':
                options.listFunctions = true;
                break;
            
            default:
                // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å --, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ø—Ä–µ—Å–µ—Ç–æ–º –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–µ–π
                if (!arg.startsWith('--')) {
                    options.functionKey = arg;
                }
                break;
        }
    }
  
    return options;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function showHelp() {
    console.log(`
üöÄ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    npm run isolated-benchmark [—Ñ—É–Ω–∫—Ü–∏—è] [–æ–ø—Ü–∏–∏]

–ü–†–ò–ú–ï–†–´:
    npm run isolated-benchmark cpp.simd
    npm run isolated-benchmark --functions

–û–ü–¶–ò–ò:
    --help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    --functions         –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–§–û–†–ú–ê–¢–´ –§–£–ù–ö–¶–ò–ô:
    tech.name               –ù–∞–ø—Ä–∏–º–µ—Ä: js.base, cpp.simd, rust.accelerate
    `);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function generateOutputFileName(options) {
    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
    let basename;

    if (options.functionKey) {
        basename = `${options.functionKey.replace('.', '_')}`;
    }

    return path.resolve(config.outputDir, `${basename}_${timestamp}.csv`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const options = parseArgs();

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    if (options.help) {
        showHelp();
        return;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
    if (options.listFunctions) {
        listAvailableFunctions();
        return;
    }
  
    await initWasm();
    try {
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–Ω–Ω–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        const runner = new BenchmarkRunner();
    
        let functions = [];
        let outputFile;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        if (options.functionKey) {
            const funcConfig = getFunctionByKey(options.functionKey);
            if (!funcConfig || !funcConfig.available) {
                console.error(`‚ùå –§—É–Ω–∫—Ü–∏—è ${options.functionKey} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
                console.log('\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --functions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π');
                return;
            }
            
            functions = [options.functionKey];
            outputFile = generateOutputFileName(options);
                    
            console.log(`üéØ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤:`);
            console.log(`   ‚Ä¢ –§—É–Ω–∫—Ü–∏—è: ${options.functionKey}`);
            console.log(`   ‚Ä¢ –†–∞–∑–º–µ—Ä—ã: ${runner.config.matrixSizes.join(', ')}`);
            console.log(`   ‚Ä¢ –§–∞–π–ª: ${path.basename(outputFile)}\n`);
            
            await runner.runFunction(options.functionKey, outputFile);
            return;
        } 
    
        if (!options.functionKey) {
            console.error('‚ùå –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --functions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π');
            return;
        }      
    } catch (error) {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        console.error(error.stack);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = { main, parseArgs, showHelp }; 