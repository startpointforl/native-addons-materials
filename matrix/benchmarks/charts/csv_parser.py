#!/usr/bin/env python3
"""
CSV –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ matrix
–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ—Ç–¥–µ–ª—å–Ω—ã–π CSV —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
"""

import pandas as pd
import numpy as np
import json
import re
from pathlib import Path
from typing import Dict, List, Tuple, Optional
from datetime import datetime
from collections import defaultdict

class BenchmarkDataCollector:
    def __init__(self, config_dir: Path = None, data_dir: str = "raw_results"):
        if config_dir is None:
            config_dir = Path(__file__).parent / "config"
        
        self.config_dir = config_dir
        self.results_dir = Path(__file__).parent.parent / data_dir
        self.data_dir = data_dir  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.load_configs()
    
    def load_configs(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            with open(self.config_dir / "method_colors.json", 'r') as f:
                self.method_config = json.load(f)
            
            with open(self.config_dir / "graph_styles.json", 'r') as f:
                self.style_config = json.load(f)
        except FileNotFoundError as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            self.method_config = {}
            self.style_config = {}
    
    def scan_directory(self, benchmark_type: str) -> Dict[str, Path]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {"–∏–º—è_–º–µ—Ç–æ–¥–∞": –ü—É—Ç—å_–∫_–ø–æ—Å–ª–µ–¥–Ω–µ–º—É_—Ñ–∞–π–ª—É}
        """
        if benchmark_type not in ['isolated', 'server']:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–∞: {benchmark_type}. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 'isolated' –∏–ª–∏ 'server'")
        
        benchmark_dir = self.results_dir / benchmark_type
        if not benchmark_dir.exists():
            raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {benchmark_dir}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞
        method_files = defaultdict(list)
        
        for csv_file in benchmark_dir.glob("*.csv"):
            method_name, timestamp = self._parse_filename(csv_file.name)
            if method_name and timestamp:
                method_files[method_name].append((timestamp, csv_file))
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        latest_files = {}
        for method_name, files in method_files.items():
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
            files.sort(key=lambda x: x[0], reverse=True)
            latest_files[method_name] = files[0][1]
        
        print(f"üìÇ –ù–∞–π–¥–µ–Ω–æ {len(latest_files)} –º–µ—Ç–æ–¥–æ–≤ –≤ {benchmark_type}: {list(latest_files.keys())}")
        return latest_files
    
    def _parse_filename(self, filename: str) -> Tuple[Optional[str], Optional[datetime]]:
        """
        –ü–∞—Ä—Å–∏–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        –§–æ—Ä–º–∞—Ç: {–∏–º—è_–º–µ—Ç–æ–¥–∞}_{–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞}.csv
        –ü—Ä–∏–º–µ—Ä: js_base_2025-09-05T16-00-58.csv
        """
        if not filename.endswith('.csv'):
            return None, None
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv
        name_part = filename[:-4]
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–ª–µ–¥—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        timestamp_pattern = r'(\d{4}-\d{2}-\d{2}T\d{2}-\d{2}-\d{2})$'
        match = re.search(timestamp_pattern, name_part)
        
        if not match:
            return None, None
        
        timestamp_str = match.group(1)
        method_name = name_part[:match.start()].rstrip('_')
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (–∑–∞–º–µ–Ω—è–µ–º - –Ω–∞ : –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏)
            timestamp_str_corrected = re.sub(r'T(\d{2})-(\d{2})-(\d{2})$', r'T\1:\2:\3', timestamp_str)
            timestamp = datetime.fromisoformat(timestamp_str_corrected)
            return method_name, timestamp
        except ValueError:
            return None, None
    
    def validate_methods(self, required_methods: List[str], available_files: Dict[str, Path]) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ CSV —Ñ–∞–π–ª—ã
        –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –º–µ—Ç–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        """
        missing_methods = []
        for method in required_methods:
            if method not in available_files:
                missing_methods.append(method)
        
        if missing_methods:
            available_methods = list(available_files.keys())
            error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤: {', '.join(missing_methods)}\n"
            error_msg += f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {', '.join(available_methods)}"
            raise ValueError(error_msg)
    
    def load_method_data(self, method_name: str, csv_path: Path, benchmark_type: str) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∏–∑ –µ–≥–æ CSV —Ñ–∞–π–ª–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π –∏ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            df = pd.read_csv(csv_path, sep=';', decimal=',')
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            df.columns = df.columns.str.strip()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            for col in df.columns:
                if col != 'matrix_size':
                    df[col] = pd.to_numeric(df[col], errors='coerce')

            if benchmark_type == 'isolated':
                method_name = method_name.replace('-', '_')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞
            if benchmark_type == 'server':
                metric_key = 'rps'
                avg_col = f'avg_{method_name}'
                min_col = f'min_{method_name}' 
                max_col = f'max_{method_name}'
            else:  # isolated
                metric_key = 'performance'
                avg_col = f'avg_{method_name}'
                min_col = f'min_{method_name}'
                max_col = f'max_{method_name}'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_cols = ['matrix_size', avg_col]
            missing_cols = [col for col in required_cols if col not in df.columns]
            if missing_cols:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏ –≤ {csv_path}: {missing_cols}")
            
            method_data = {
                'name': method_name,
                'matrix_sizes': df['matrix_size'].tolist(),
                metric_key: {
                    'mean': df[avg_col].tolist(),
                    'min': df[min_col].tolist() if min_col in df.columns else None,
                    'max': df[max_col].tolist() if max_col in df.columns else None
                }
            }
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω {method_name}: {len(df)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
            return method_data
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∞ –∏–∑ {csv_path}: {e}")
    
    def collect_benchmark_data(self, benchmark_type: str, methods: List[str]) -> Dict:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {"–∏–º—è_–º–µ—Ç–æ–¥–∞": —Å–ª–æ–≤–∞—Ä—å_–¥–∞–Ω–Ω—ã—Ö_–º–µ—Ç–æ–¥–∞, ...}
        """
        print(f"üîç –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ {benchmark_type} –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤: {methods}")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        available_files = self.scan_directory(benchmark_type)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        self.validate_methods(methods, available_files)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        methods_data = {}
        for method_name in methods:
            csv_path = available_files[method_name]
            method_data = self.load_method_data(method_name, csv_path, benchmark_type)
            methods_data[method_name] = method_data
        
        return methods_data
    
    def list_available_methods(self, benchmark_type: str) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        try:
            available_files = self.scan_directory(benchmark_type)
            return sorted(list(available_files.keys()))
        except (FileNotFoundError, ValueError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤: {e}")
            return []
    
    def get_method_style(self, method_name: str, benchmark_type: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –∏ —Å—Ç–∏–ª—å –ª–∏–Ω–∏–∏ –¥–ª—è –º–µ—Ç–æ–¥–∞"""
        default_style = {
            'color': '#FFFFFF', 
            'linestyle': '-'
        }

        method_name = method_name.replace('-', '_')
        
        return {
            'color': self.method_config.get('colors', {}).get(method_name, default_style['color']),
            'linestyle': self.method_config.get('line_styles', {}).get(method_name, default_style['linestyle']),
            'marker': self.method_config.get('markers', {}).get(method_name, None)
        }

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
    collector = BenchmarkDataCollector()
    
    import sys
    if len(sys.argv) >= 3:
        benchmark_type = sys.argv[1]  # isolated –∏–ª–∏ server
        methods = sys.argv[2].split(',')
        
        try:
            data = collector.collect_benchmark_data(benchmark_type, methods)
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(data)} –º–µ—Ç–æ–¥–æ–≤")
            for method, method_data in data.items():
                sizes = len(method_data['matrix_sizes'])
                print(f"  ‚Ä¢ {method}: {sizes} —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∞—Ç—Ä–∏—Ü")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python csv_parser.py <—Ç–∏–ø_–±–µ–Ω—á–º–∞—Ä–∫–∞> <–º–µ—Ç–æ–¥1,–º–µ—Ç–æ–¥2,...>")
        print("–ü—Ä–∏–º–µ—Ä: python csv_parser.py isolated js_base,cpp_simd") 