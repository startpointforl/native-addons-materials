const fs = require('fs');
const path = require('path');
const axios = require('axios');
const config = require('./config');

function convertToCSVNumber(number) {
    return number.toString().replace('.', ',');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
function getStabilityInfo(cv) {
    const thresholds = {
        excellent: 5,   // CV < 5% - –æ—Ç–ª–∏—á–Ω–æ
        good: 15        // CV < 15% - —Ö–æ—Ä–æ—à–æ, –∏–Ω–∞—á–µ –ø–ª–æ—Ö–æ
    };
    
    if (cv < thresholds.excellent) {
        return { level: 'excellent', icon: 'üü¢', color: '\x1b[32m', label: '–û–¢–õ–ò–ß–ù–û' };
    } else if (cv < thresholds.good) {
        return { level: 'good', icon: 'üü°', color: '\x1b[33m', label: '–•–û–†–û–®–û' };
    } else {
        return { level: 'poor', icon: 'üî¥', color: '\x1b[31m', label: '–ü–õ–û–•–û' };
    }
}

async function updateMatrixSize(size) {
    try {
        await axios.post(`${config.serverUrl}/update-matrix`, { size });
        console.log(`  ‚úÖ –†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ${size}x${size}`);
        await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
        console.error('  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã:', error.message);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function ensureOutputDir(outputDir) {
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${outputDir}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞ –¥–ª—è server –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
function initServerCSV(outputFile, endpointKey) {
    if (!fs.existsSync(outputFile)) {
        const cleanEndpoint = endpointKey.replace('.', '_');
        const headers = ['matrix_size', `avg_${cleanEndpoint}`, `min_${cleanEndpoint}`, `max_${cleanEndpoint}`];
        
        const headerLine = headers.join(';') + '\n';
        fs.writeFileSync(outputFile, headerLine);
        console.log(`üìä –°–æ–∑–¥–∞–Ω CSV —Ñ–∞–π–ª: ${path.basename(outputFile)}`);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ CSV —Ñ–∞–π–ª
function appendServerCSV(outputFile, matrixSize, results) {
    const row = [
        matrixSize,
        convertToCSVNumber(results.avg),
        convertToCSVNumber(results.min),
        convertToCSVNumber(results.max)
    ];
    
    const csvLine = row.join(';') + '\n';
    fs.appendFileSync(outputFile, csvLine);
    console.log(`  üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ CSV`);
}

// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Ç—Ä–∏—Ü—ã
function logMatrixSizeHeader(matrixSize, current, total) {
    console.log(`\n${'‚ïê'.repeat(60)}`);
    console.log(`üìê –†–ê–ó–ú–ï–† –ú–ê–¢–†–ò–¶–´: ${matrixSize}x${matrixSize} (${current}/${total})`);
    console.log(`${'‚ïê'.repeat(60)}`);
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
function logEndpointResult(endpointName, stats) {
    console.log(`  ‚úÖ ${endpointName}:`);
    console.log(`     üìä RPS: avg=${stats.avg}, min=${stats.min}, max=${stats.max}`);
}

module.exports = {
    ensureOutputDir,
    initServerCSV,
    appendServerCSV,
    logMatrixSizeHeader,
    logEndpointResult,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    convertToCSVNumber,
    updateMatrixSize,
    getStabilityInfo
};