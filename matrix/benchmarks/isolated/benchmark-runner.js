const { generateMatrix } = require('../../utils/generate-matrix');
const { getFunctionByKey } = require('./functions-registry');
const config = require('./config');
const {
    analyzeTimings,
    ensureOutputDir,
    initCSV,
    appendToCSV,
    logBatchResult,
    logFunctionResult,
    logMatrixSizeHeader,
    logFunctionHeader,
    forceGarbageCollection,
    sleep,
} = require('./utils');

class BenchmarkRunner {
    constructor() {
        this.config = config;
        this.allResults = {};
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
    async prepare(functionKey, outputFile) {
        console.log('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤');
        console.log('‚ïê'.repeat(60));
        
        ensureOutputDir(this.config.outputDir);
        initCSV(outputFile, functionKey);
        
        console.log(`üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
        console.log(`   ‚Ä¢ –†–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü: ${this.config.matrixSizes.join(', ')}`);
        console.log(`   ‚Ä¢ –ë–∞—Ç—á–µ–π –Ω–∞ —Ä–∞–∑–º–µ—Ä: ${this.config.batches}`);
        console.log(`   ‚Ä¢ –ò—Ç–µ—Ä–∞—Ü–∏–π –≤ –±–∞—Ç—á–µ: ${this.config.iterationsPerBatch}`);
        console.log(`   ‚Ä¢ –¶–µ–ª–µ–≤–æ–π CV: < ${this.config.targetStabilityCV}%`);
        console.log(`   ‚Ä¢ –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${outputFile}\n`);
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    async executeFunction(func, matrixA, matrixB, funcConfig) {
        const startTime = performance.now();
        
        try {
            if (funcConfig.type === 'async') {
                await func(matrixA, matrixB);
            } else {
                func(matrixA, matrixB);
            }
            
            const endTime = performance.now();
            return endTime - startTime;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: ${error.message}`);
            throw error;
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞
    async executeBatch(func, funcConfig, matrixA, matrixB, batchNum, totalBatches) {
        const batchTimes = [];
        
        for (let i = 0; i < this.config.iterationsPerBatch; i++) {
            const iterationTime = await this.executeFunction(func, matrixA, matrixB, funcConfig);
            batchTimes.push(iterationTime);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            if (i < this.config.iterationsPerBatch - 1) {
                await sleep(10);
            }
        }
        
        const batchTime = batchTimes.reduce((sum, time) => sum + time, 0) / batchTimes.length;
        logBatchResult(batchNum, totalBatches, batchTime, batchNum === totalBatches);
        
        return batchTime;
    }

    // –†–∞–∑–æ–≥—Ä–µ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    async warmupFunction(func, funcConfig, matrixA, matrixB) {
        console.log(`  üî• –†–∞–∑–æ–≥—Ä–µ–≤: ${this.config.warmupIterations} –∏—Ç–µ—Ä–∞—Ü–∏–π...`);
        
        for (let i = 0; i < this.config.warmupIterations; i++) {
            await this.executeFunction(func, matrixA, matrixB, funcConfig);
            await sleep(10);
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    async benchmarkFunction(functionKey, matrixA, matrixB) {
        const funcConfig = getFunctionByKey(functionKey);
        
        if (!funcConfig || !funcConfig.available) {
            console.log(`‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è ${functionKey} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
            return null;
        }

        const { func, name } = funcConfig;
        
        await this.warmupFunction(func, funcConfig, matrixA, matrixB);
        
        const batchTimes = [];
        let currentBatches = this.config.batches;
        let currentIterations = this.config.iterationsPerBatch;
        let retryCount = 0;
    
        while (retryCount <= this.config.autoRetry.maxRetries) {
            batchTimes.length = 0;
            
            for (let batch = 1; batch <= currentBatches; batch++) {
                if (this.config.gcBetweenBatches && batch > 1) {
                    await forceGarbageCollection();
                    await sleep(this.config.batchCooldown);
                }
                
                const batchTime = await this.executeBatch(
                func, funcConfig, matrixA, matrixB, batch, currentBatches
                );
                batchTimes.push(batchTime);
            }
      
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            const analysis = analyzeTimings(batchTimes);
            
            // –ï—Å–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∏–ª–∏ —Ä–µ—Ç—Ä–∞–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
            if (analysis.cv <= this.config.targetStabilityCV || 
                !this.config.autoRetry.enabled || 
                retryCount >= this.config.autoRetry.maxRetries) {
                
                // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                logFunctionResult(name, analysis, this.config.stabilityThresholds);
                
                return analysis;
            }
      
            // –ù—É–∂–µ–Ω —Ä–µ—Ç—Ä–∞–π - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            retryCount++;
            currentBatches += this.config.autoRetry.increaseBatches;
            currentIterations += this.config.autoRetry.increaseIterations;
            
            console.log(`  üîÑ –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CV: ${analysis.cv}%). –†–µ—Ç—Ä–∞–π ${retryCount}/${this.config.autoRetry.maxRetries}`);
            console.log(`     –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞—Ç—á–∏ –¥–æ ${currentBatches}, –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–æ ${currentIterations}`);
            
            const oldIterationsPerBatch = this.config.iterationsPerBatch;
            this.config.iterationsPerBatch = currentIterations;
            this.config.iterationsPerBatch = oldIterationsPerBatch;
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Ç—Ä–∏—Ü—ã
    async benchmarkMatrixSize(matrixSize, functionKey, sizeIndex, totalSizes) {
        logMatrixSizeHeader(matrixSize, sizeIndex + 1, totalSizes);
        
        console.log('üî¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü...');
        const matrixA = generateMatrix(matrixSize);
        const matrixB = generateMatrix(matrixSize);
        
        await forceGarbageCollection();
        
        logFunctionHeader(functionKey);
        const results = await this.benchmarkFunction(functionKey, matrixA, matrixB);
        
        return results;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
    async runFunction(functionKey, outputFile) {
        const startTime = Date.now();
        
        try {
            await this.prepare(functionKey, outputFile);
        
            for (let i = 0; i < this.config.matrixSizes.length; i++) {
                const matrixSize = this.config.matrixSizes[i];
                
                const results = await this.benchmarkMatrixSize(matrixSize, functionKey, i, this.config.matrixSizes.length);
                
                if (Object.keys(results).length > 0) {
                    this.allResults[matrixSize] = results;

                    appendToCSV(outputFile, matrixSize, results);
                }
                
                await forceGarbageCollection();
                await sleep(1000);
            }
            
            const duration = Math.round((Date.now() - startTime) / 1000);
            console.log(`\n‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥`);
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputFile}`);
            
            return this.allResults;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: ${error.message}`);
            console.error(error.stack);
            throw error;
        }
    }
}

module.exports = { BenchmarkRunner }; 