#!/usr/bin/env python3
"""
CLI –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ matrix
–ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑ –Ω–æ–≤–æ–≥–æ CSV —Ñ–æ—Ä–º–∞—Ç–∞
"""

import argparse
import sys
from pathlib import Path
from typing import List

from csv_parser import BenchmarkDataCollector
from plot_generator import BenchmarkPlotGenerator

def create_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ matrix (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã:
  # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  python cli.py --benchmark-type isolated --methods js_base cpp_simd rust_base
  
  # –° –∫–∞—Å—Ç–æ–º–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
  python cli.py --benchmark-type server --methods cpp_accelerate js_base --title "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å macOS"
  
  # –î–∞–Ω–Ω—ã–µ —Å macOS
  python cli.py --benchmark-type isolated --methods js_base cpp_accelerate --data-dir macos_results
  
  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Linux vs macOS (–¥–≤–µ –∫–æ–º–∞–Ω–¥—ã)
  python cli.py --benchmark-type isolated --methods js_base --data-dir linux_results --title "Linux"
  python cli.py --benchmark-type isolated --methods js_base --data-dir macos_results --title "macOS"
  
  # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
  python cli.py --benchmark-type isolated --interactive
  
  # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  python cli.py --benchmark-type isolated --list-methods
        """
    )
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        '--benchmark-type', '-b',
        required=True,
        choices=['isolated', 'server'],
        help='–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'
    )
    
    # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ (–æ–¥–∏–Ω –∏–∑: --methods, --interactive, --list-methods)
    method_group = parser.add_mutually_exclusive_group()
    method_group.add_argument(
        '--methods', '-m',
        nargs='+',
        help='–°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫'
    )
    
    method_group.add_argument(
        '--interactive', '-i',
        action='store_true',
        help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤'
    )
    
    method_group.add_argument(
        '--list-methods', '-l',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–∏–ø–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞ –∏ –≤—ã–π—Ç–∏'
    )
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        '--title', '-t',
        help='–ö–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    parser.add_argument(
        '--data-dir', '-d',
        default='raw_results',
        help='–ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: raw_results, –≤–∞—Ä–∏–∞–Ω—Ç—ã: macos_results, linux_results)'
    )
    
    return parser

def interactive_method_selection(collector: BenchmarkDataCollector, benchmark_type: str) -> List[str]:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤"""
    available_methods = collector.list_available_methods(benchmark_type)
    
    if not available_methods:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞: {benchmark_type}")
        sys.exit(1)
    
    print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è {benchmark_type} –±–µ–Ω—á–º–∞—Ä–∫–æ–≤:")
    for i, method in enumerate(available_methods, 1):
        print(f"  {i:2d}. {method}")
    
    print(f"\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1 3 5' –∏–ª–∏ 'all'):")
    while True:
        try:
            selection = input(">>> ").strip()
            
            if selection.lower() == 'all':
                return available_methods
            
            if selection.lower() in ['', 'q', 'quit', 'exit', '–≤—ã—Ö–æ–¥', '–≤']:
                print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
                sys.exit(0)
            
            # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∞
            indices = [int(x.strip()) - 1 for x in selection.split()]
            selected_methods = []
            
            for idx in indices:
                if 0 <= idx < len(available_methods):
                    selected_methods.append(available_methods[idx])
                else:
                    raise IndexError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: {idx + 1}")
            
            if selected_methods:
                return selected_methods
            else:
                print("‚ö†Ô∏è  –ú–µ—Ç–æ–¥—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except (ValueError, IndexError) as e:
            print(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {e}")
            print("    –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1 3 5') –∏–ª–∏ 'all'")

def main():
    """–ì–ª–∞–≤–Ω–∞—è CLI —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = create_parser()
    args = parser.parse_args()
    
    if args.verbose:
        print(f"üöÄ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ matrix")
        print(f"   –¢–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–∞: {args.benchmark_type}")
        print(f"   –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {args.data_dir}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–∞–ø–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
    try:
        collector = BenchmarkDataCollector(data_dir=args.data_dir)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∂–∏–º list-methods
    if args.list_methods:
        available_methods = collector.list_available_methods(args.benchmark_type)
        if available_methods:
            print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è {args.benchmark_type} –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ (–ø–∞–ø–∫–∞: {args.data_dir}):")
            for method in available_methods:
                print(f"  ‚Ä¢ {method}")
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞: {args.benchmark_type} (–ø–∞–ø–∫–∞: {args.data_dir})")
        sys.exit(0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    if args.interactive:
        methods = interactive_method_selection(collector, args.benchmark_type)
    elif args.methods:
        methods = args.methods
    else:
        # –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∏ –Ω–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ --methods, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --interactive —Ä–µ–∂–∏–º")
        parser.print_help()
        sys.exit(1)
    
    if args.verbose:
        print(f"   –ú–µ—Ç–æ–¥—ã: {', '.join(methods)}")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
    try:
        methods_data = collector.collect_benchmark_data(args.benchmark_type, methods)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤
    try:
        generator = BenchmarkPlotGenerator()
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        sys.exit(1)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–∞ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
        output_dir = Path(__file__).parent / "output"
        output_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø–∞–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ default)
        methods_str = "_".join(methods)
        if args.data_dir != 'raw_results':
            base_name = f"{args.data_dir}_{args.benchmark_type}_{methods_str}"
        else:
            base_name = f"{args.benchmark_type}_{methods_str}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞
        if args.benchmark_type == 'server':
            plot_type = 'rps'
            default_title = f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å RPS - {', '.join(methods)}"
        else:
            plot_type = 'performance'  
            default_title = f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - {', '.join(methods)}"
        
        title = args.title or default_title
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        output_path = generator.create_plot(
            methods_data, 
            args.benchmark_type, 
            plot_type,
            title=title,
            output_path=output_dir / base_name
        )
        
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f"   üìä –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        print(f"   üìÅ –í—ã–≤–æ–¥: {output_path}")
        print(f"   üìà –ú–µ—Ç–æ–¥—ã: {len(methods)} ({', '.join(methods)})")
        if args.data_dir != 'raw_results':
            print(f"   üìÇ –î–∞–Ω–Ω—ã–µ: {args.data_dir}")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())