const axios = require('axios');
const { multiplyEndpoints, ENDPOINTS } = require('../utils/endpoints');

async function testServerEndpoints() {
    console.log('üåê –¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...\n');
    
    const SERVER_URL = 'http://localhost:3000';
  
    try {
        const referenceResponse = await axios.get(`${SERVER_URL}${ENDPOINTS.JS.BASE}`, { timeout: 5000 });
        const referenceValue = parseFloat(referenceResponse.data.match(/C\[0\]\[0\] = ([\d.]+)/)[1]);
        console.log(`‚úÖ –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ${ENDPOINTS.JS.BASE} - OK`);

        let successCount = 0;
        let totalCount = 0;

        for (const endpoint of multiplyEndpoints) {
            totalCount++;
            
            try {
                const response = await axios.get(`${SERVER_URL}${endpoint}`, { timeout: 10000 });
                const value = parseFloat(response.data.match(/C\[0\]\[0\] = ([\d.]+)/)[1]);
                
                if (Math.abs(value - referenceValue) < 1e-5) {
                    console.log(`‚úÖ ${endpoint} - OK`);
                    successCount++;
                } else {
                    console.log(`‚ùå ${endpoint} - –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (${value} vs ${referenceValue})`);
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è ${endpoint} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${error.message.split(' ')[0]})`);
            }
            
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n`);
        return successCount > 0;
    } catch (error) {
        console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã\n');
        return true;
    }
}

module.exports = {
    testServerEndpoints
}