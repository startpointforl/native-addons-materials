const autocannon = require('autocannon');
const { getEndpointByKey, checkEndpointAvailability } = require('./endpoints-registry');
const { 
    updateMatrixSize, 
    ensureOutputDir,
    initServerCSV,
    appendServerCSV,
    logMatrixSizeHeader,
    logEndpointResult
} = require('./utils');
const config = require('./config');

class ServerRunner {
    constructor() {
        this.config = config;
        this.allResults = {};
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É server –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
    async prepare(endpointKey, outputFile) {
        console.log('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É server –±–µ–Ω—á–º–∞—Ä–∫–æ–≤');
        console.log('‚ïê'.repeat(60));
        
        ensureOutputDir(this.config.outputDir);
        initServerCSV(outputFile, endpointKey);
        
        console.log(`üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
        console.log(`   ‚Ä¢ –†–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü: ${this.config.matrixSizes.join(', ')}`);
        console.log(`   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: ${this.config.duration}s`);
        console.log(`   ‚Ä¢ Server URL: ${this.config.serverUrl}`);
        console.log(`   ‚Ä¢ –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${outputFile}\n`);
    }

    // –†–∞–∑–æ–≥—Ä–µ–≤ —Å–µ—Ä–≤–µ—Ä–∞
    async warmupServer() {
        console.log('üî• –†–∞–∑–æ–≥—Ä–µ–≤ —Å–µ—Ä–≤–µ—Ä–∞...');
        
        try {
            await autocannon({
                url: `${this.config.serverUrl}/simple`,
                duration: this.config.warmupDuration || 3
            });
            console.log('‚úÖ –†–∞–∑–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω\n');
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞:', error.message);
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    async runEndpointTest(endpointConfig) {
        const { endpoint, name } = endpointConfig;
        const url = `${this.config.serverUrl}${endpoint}`;
        
        console.log(`  üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º ${name} (${endpoint})...`);
        
        try {
            const result = await autocannon({
                url: url,
                duration: this.config.duration,
                timeout: this.config.timeout
            });

            // –ë–µ—Ä—ë–º –≥–æ—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ autocannon
            const stats = {
                avg: parseFloat(result.requests.average.toFixed(2)),
                min: result.requests.min,
                max: result.requests.max
            };

            logEndpointResult(name, stats);
            return stats;
            
        } catch (error) {
            console.log(`    ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            return {
                avg: 0,
                min: 0,
                max: 0
            };
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Ç—Ä–∏—Ü—ã  
    async benchmarkMatrixSize(matrixSize, endpointKey, sizeIndex, totalSizes) {
        logMatrixSizeHeader(matrixSize, sizeIndex + 1, totalSizes);
        
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
        await updateMatrixSize(matrixSize);
        
        const endpointConfig = getEndpointByKey(endpointKey);
        const results = await this.runEndpointTest(endpointConfig);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞–∑–º–µ—Ä–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, this.config.cooldown * 1000 || 2000));
        
        return results;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ server –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
    async runEndpoint(endpointKey, outputFile) {
        const startTime = Date.now();
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            const endpointConfig = getEndpointByKey(endpointKey);
            if (!endpointConfig) {
                throw new Error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: ${endpointKey}`);
            }

            const isAvailable = await checkEndpointAvailability(endpointConfig.endpoint);
            if (!isAvailable) {
                throw new Error(`‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpointConfig.endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
            }

            await this.prepare(endpointKey, outputFile);
            await this.warmupServer();
        
            for (let i = 0; i < this.config.matrixSizes.length; i++) {
                const matrixSize = this.config.matrixSizes[i];
                
                const results = await this.benchmarkMatrixSize(matrixSize, endpointKey, i, this.config.matrixSizes.length);
                
                this.allResults[matrixSize] = results;
                appendServerCSV(outputFile, matrixSize, results);
            }
            
            const duration = Math.round((Date.now() - startTime) / 1000);
            console.log(`\n‚úÖ Server –±–µ–Ω—á–º–∞—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥`);
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputFile}`);
            
            return this.allResults;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è server –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: ${error.message}`);
            throw error;
        }
    }
}

module.exports = { ServerRunner }; 