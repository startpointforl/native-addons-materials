const fs = require('fs');

// –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateMean(values) {
    return values.reduce((sum, val) => sum + val, 0) / values.length;
}

function calculateStandardDeviation(values) {
    const mean = calculateMean(values);
    const variance = values.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / values.length;
    return Math.sqrt(variance);
}

function calculateCoefficientOfVariation(values) {
    const mean = calculateMean(values);
    const stdDev = calculateStandardDeviation(values);
    return (stdDev / mean) * 100; // –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
}

function analyzeTimings(batchTimes) {
    const mean = calculateMean(batchTimes);
    const stdDev = calculateStandardDeviation(batchTimes);
    const cv = calculateCoefficientOfVariation(batchTimes);
  
    return {
        mean: parseFloat(mean.toFixed(3)),
        stdDev: parseFloat(stdDev.toFixed(3)),
        cv: parseFloat(cv.toFixed(2)),
        min: Math.min(...batchTimes),
        max: Math.max(...batchTimes),
        batchTimes: batchTimes.map(t => parseFloat(t.toFixed(3)))
    };
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –¥–ª—è CSV
function formatNumberForCSV(number) {
    // –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –≤ Google Sheets
    return number.toString().replace('.', ',');
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –≤–∞—Ä–∏–∞—Ü–∏–∏
function getStabilityInfo(cv, thresholds) {
    if (cv < thresholds.excellent) {
        return { level: 'excellent', icon: 'üü¢', color: '\x1b[32m', label: '–û–¢–õ–ò–ß–ù–û' };
    } else if (cv < thresholds.good) {
        return { level: 'good', icon: 'üü°', color: '\x1b[33m', label: '–•–û–†–û–®–û' };
    } else {
        return { level: 'poor', icon: 'üî¥', color: '\x1b[31m', label: '–ü–õ–û–•–û' };
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function ensureOutputDir(outputDir) {
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${outputDir}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞
function initCSV(outputFile, functionKey) {
    const headers = ['matrix_size'];

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏: —Å—Ä–µ–¥–Ω–µ–µ, min, max
    const cleanKey = functionKey.replace(/\./g, '_').replace(/-/g, '_');
    headers.push(`avg_${cleanKey}`);    // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
    headers.push(`min_${cleanKey}`);    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    headers.push(`max_${cleanKey}`);    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

    const headerLine = headers.join(';') + '\n';
    fs.writeFileSync(outputFile, headerLine);

    console.log(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω CSV —Ñ–∞–π–ª: ${outputFile}`);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV
function appendToCSV(outputFile, matrixSize, results) {
    const row = [matrixSize.toString()];

    row.push(formatNumberForCSV(results.mean));    // –°—Ä–µ–¥–Ω–µ–µ
    row.push(formatNumberForCSV(results.min));     // Min
    row.push(formatNumberForCSV(results.max));     // Max

    const rowLine = row.join(';') + '\n';
    fs.appendFileSync(outputFile, rowLine);
}

// –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
function logBatchResult(batchNum, totalBatches, batchTime, isLast = false) {
    const icon = isLast ? 'üèÅ' : 'üìä';
    console.log(`  ${icon} –ë–∞—Ç—á ${batchNum}/${totalBatches}: ${batchTime.toFixed(2)}ms`);
}

function logFunctionResult(funcName, analysis, thresholds) {
    const stability = getStabilityInfo(analysis.cv, thresholds);
    const reset = '\x1b[0m';

    console.log(`üìä ${funcName}: ${analysis.mean}ms ¬± ${analysis.stdDev}ms ` +
                `${stability.color}(CV: ${analysis.cv}%, min: ${analysis.min}ms, max: ${analysis.max}ms) ${stability.icon} ${stability.label}${reset}`);
}

function logMatrixSizeHeader(matrixSize, current, total) {
    console.log(`\nüî¢ –ú–∞—Ç—Ä–∏—Ü–∞ ${matrixSize}x${matrixSize} (${current}/${total})`);
    console.log('‚ïê'.repeat(50));
}

function logFunctionHeader(funcName) {
    console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${funcName}`);
}

// –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
async function forceGarbageCollection() {
    if (global.gc) {
        global.gc();
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ GC
        await new Promise(resolve => setTimeout(resolve, 100));
    }
}

// –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

module.exports = {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    calculateMean,
    calculateStandardDeviation,
    calculateCoefficientOfVariation,
    analyzeTimings,

    // –†–∞–±–æ—Ç–∞ —Å CSV
    formatNumberForCSV,
    ensureOutputDir,
    initCSV,
    appendToCSV,

    // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    getStabilityInfo,
    logBatchResult,
    logFunctionResult,
    logMatrixSizeHeader,
    logFunctionHeader,

    // –£—Ç–∏–ª–∏—Ç—ã
    forceGarbageCollection,
    sleep
}; 