const axios = require('axios');
const config = require('./config');
const { ENDPOINTS } = require('../../utils/endpoints');

// –†–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö server —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
const endpointsRegistry = {
    js: {
        base: {
            name: 'JS Base',
            endpoint: ENDPOINTS.JS.BASE,
            available: null
        },
        'non-blocking': {
            name: 'JS Non-Blocking',
            endpoint: ENDPOINTS.JS.NON_BLOCKING,
            available: null
        },
        worker: {
            name: 'JS Worker',
            endpoint: ENDPOINTS.JS.WORKER,
            available: null
        },
        optimized: {
            name: 'JS Optimized',
            endpoint: ENDPOINTS.JS.OPTIMIZED,
            available: null
        },
        'optimized-worker': {
            name: 'JS Optimized Worker',
            endpoint: ENDPOINTS.JS.OPTIMIZED_WORKER,
            available: null
        }
    },

    cpp: {
        base: {
            name: 'C++ Base',
            endpoint: ENDPOINTS.CPP.BASE,
            available: null
        },
        async: {
            name: 'C++ Async',
            endpoint: ENDPOINTS.CPP.ASYNC,
            available: null
        },
        simd: {
            name: 'C++ SIMD',
            endpoint: ENDPOINTS.CPP.SIMD,
            available: null
        },
        'simd-async': {
            name: 'C++ SIMD Async',
            endpoint: ENDPOINTS.CPP.SIMD_ASYNC,
            available: null
        },
        accelerate: {
            name: 'C++ Accelerate',
            endpoint: ENDPOINTS.CPP.ACCELERATE,
            available: null
        },
        'accelerate-async': {
            name: 'C++ Accelerate Async',
            endpoint: ENDPOINTS.CPP.ACCELERATE_ASYNC,
            available: null
        }
    },

    wasm: {
        base: {
            name: 'WASM Base',
            endpoint: ENDPOINTS.WASM.BASE,
            available: null
        },
        worker: {
            name: 'WASM Worker',
            endpoint: ENDPOINTS.WASM.WORKER,
            available: null
        },
        simd: {
            name: 'WASM SIMD',
            endpoint: ENDPOINTS.WASM.SIMD,
            available: null
        },
        'simd-worker': {
            name: 'WASM SIMD Worker',
            endpoint: ENDPOINTS.WASM.SIMD_WORKER,
            available: null
        }
    },

    rust: {
        base: {
            name: 'Rust Base',
            endpoint: ENDPOINTS.RUST.BASE,
            available: null
        },
        async: {
            name: 'Rust Async',
            endpoint: ENDPOINTS.RUST.ASYNC,
            available: null
        },
        simd: {
            name: 'Rust SIMD',
            endpoint: ENDPOINTS.RUST.SIMD,
            available: null
        },
        'simd-async': {
            name: 'Rust SIMD Async',
            endpoint: ENDPOINTS.RUST.SIMD_ASYNC,
            available: null
        },
        accelerate: {
            name: 'Rust Accelerate',
            endpoint: ENDPOINTS.RUST.ACCELERATE,
            available: null
        },
        'accelerate-async': {
            name: 'Rust Accelerate Async',
            endpoint: ENDPOINTS.RUST.ACCELERATE_ASYNC,
            available: null
        }
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
async function checkEndpointAvailability(endpoint) {
    try {
        const response = await axios.get(`${config.serverUrl}${endpoint}`, { 
            timeout: 5000,
            validateStatus: (status) => status < 500 
        });
        return response.status === 200;
    } catch (error) {
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function checkAllEndpoints() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
    
    for (const [_tech, endpoints] of Object.entries(endpointsRegistry)) {
        for (const [_name, config] of Object.entries(endpoints)) {
            if (config.available === null) {
                config.available = await checkEndpointAvailability(config.endpoint);
                if (!config.available) {
                    console.warn(`‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç ${config.endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
                }
            }
        }
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
async function getAllAvailableEndpoints() {
    await checkAllEndpoints();
    
    const available = {};
    for (const [tech, endpoints] of Object.entries(endpointsRegistry)) {
        available[tech] = {};
        for (const [name, config] of Object.entries(endpoints)) {
            if (config.available) {
                available[tech][name] = config;
            }
        }
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–µ–∫—Ü–∏–∏
        if (Object.keys(available[tech]).length === 0) {
            delete available[tech];
        }
    }
    return available;
}

// –ü–æ–ª—É—á–∏—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ –∫–ª—é—á—É
function getEndpointByKey(key) {
    const [tech, name] = key.split('.');
    return endpointsRegistry[tech]?.[name];
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function listAvailableEndpoints() {
    await checkAllEndpoints();

    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ server —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:\n');

    let totalAvailable = 0;
    let totalEndpoints = 0;

    for (const [tech, endpoints] of Object.entries(endpointsRegistry)) {
        const availableEndpoints = {};
        const unavailableEndpoints = {};

        for (const [name, config] of Object.entries(endpoints)) {
            totalEndpoints++;
            if (config.available) {
                availableEndpoints[name] = config;
                totalAvailable++;
            } else {
                unavailableEndpoints[name] = config;
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        if (Object.keys(availableEndpoints).length > 0) {
            console.log(`üîß ${tech.toUpperCase()}: ${Object.keys(availableEndpoints).length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤`);
            for (const [name, config] of Object.entries(availableEndpoints)) {
                console.log(`   ‚úÖ ${tech}.${name} - ${config.name} (${config.endpoint})`);
            }
            console.log();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (Object.keys(unavailableEndpoints).length > 0) {
            console.log(`üîß ${tech.toUpperCase()}: ${Object.keys(unavailableEndpoints).length} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤`);
            for (const [name, config] of Object.entries(unavailableEndpoints)) {
                console.log(`   ‚ùå ${tech}.${name} - ${config.name} (${config.endpoint})`);
            }
            console.log();
        }
    }

    // –°–≤–æ–¥–∫–∞
    console.log(`üìä –ò—Ç–æ–≥–æ: ${totalAvailable}/${totalEndpoints} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ\n`);
    
    if (totalAvailable === 0) {
        console.log('‚ö†Ô∏è –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
    }
}

module.exports = {
    endpointsRegistry,
    checkEndpointAvailability,
    checkAllEndpoints,
    getAllAvailableEndpoints,
    getEndpointByKey,
    listAvailableEndpoints
}; 