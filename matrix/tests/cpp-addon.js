const cppMatrix = require('bindings')('matrix');
const { generateMatrix } = require('../utils/generate-matrix');
const { isMatrixEqual, promisifyCallback } = require('./helper');

async function testCppAddons() {
    console.log('‚öôÔ∏è –¢–µ—Å—Ç C++ –∞–¥–¥–æ–Ω–æ–≤...\n');
    
    try {
        const matrixA = generateMatrix(10);
        const matrixB = generateMatrix(10);

        const reference = cppMatrix.multiplyBase(matrixA, matrixB);
        console.log('‚úÖ C++ base - OK');

        const asyncResult = await promisifyCallback(cppMatrix.multiplyAsync)(matrixA, matrixB);
        if (!isMatrixEqual(reference, asyncResult)) {
            throw new Error('Async result mismatch');
        }
        console.log('‚úÖ C++ async - OK');

        const simdResult = cppMatrix.multiplySimd(matrixA, matrixB);
        if (!isMatrixEqual(reference, simdResult)) {
            throw new Error('SIMD result mismatch');
        }
        console.log('‚úÖ C++ SIMD - OK');

        const simdAsyncResult = await promisifyCallback(cppMatrix.multiplySimdAsync)(matrixA, matrixB);
        if (!isMatrixEqual(reference, simdAsyncResult)) {
            throw new Error('SIMD async result mismatch');
        }
        console.log('‚úÖ C++ SIMD async - OK');

        if (process.platform === 'darwin') {
            try {
                const accelerateResult = cppMatrix.multiplyAccelerate(matrixA, matrixB);
                if (!isMatrixEqual(reference, accelerateResult)) {
                    throw new Error('Accelerate result mismatch');
                }
                console.log('‚úÖ C++ Accelerate - OK');
            } catch (e) {
                console.log('‚ö†Ô∏è C++ Accelerate - –æ—à–∏–±–∫–∞:', e.message);
            }

            try {
                const accelerateAsyncResult = await promisifyCallback(cppMatrix.multiplyAccelerateAsync)(matrixA, matrixB);
                if (!isMatrixEqual(reference, accelerateAsyncResult)) {
                    throw new Error('Accelerate async result mismatch');
                }
                console.log('‚úÖ C++ Accelerate async - OK');
            } catch (e) {
                console.log('‚ö†Ô∏è C++ Accelerate async - –æ—à–∏–±–∫–∞:', e.message);
            }
        } else {
            console.log('‚ö†Ô∏è C++ Accelerate - –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ macOS');
        }

        console.log('üéâ –í—Å–µ C++ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!\n');
        return true;
    } catch (error) {
        console.error('‚ùå C++ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã:', error.message);
        return false;
    }
}

module.exports = {
    testCppAddons
}